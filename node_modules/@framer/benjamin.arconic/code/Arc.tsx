import * as React from "react"
import { PropertyControls, addPropertyControls, ControlType } from "framer"

export function Arconic({
    width,
    height,
    length,
    strokeWidth,
    lineCap,
    color,
    colorEnd,
    angle,
}) {
    let anglePI = angle * (Math.PI / 180)
    let currentAngle = {
        x1: Math.round(50 + Math.sin(anglePI) * 50),
        y1: Math.round(50 + Math.cos(anglePI) * 50),
        x2: Math.round(50 + Math.sin(anglePI + Math.PI) * 50),
        y2: Math.round(50 + Math.cos(anglePI + Math.PI) * 50),
    }

    const endPercentage = (length / 360) * 100

    return (
        <div style={{ position: "relative", width: width, height: height }}>
            <svg
                width={width}
                height={height}
                viewBox={`0 0 ${width} ${height}`}
                style={{ position: "absolute", top: 0, left: 0 }}
            >
                <path
                    d={arc(
                        width / 2,
                        height / 2,
                        width / 2 - strokeWidth / 2,
                        0,
                        length
                    )}
                    fill={"none"}
                    stroke={colorEnd}
                    strokeWidth={strokeWidth}
                    strokeLinecap={"round"}
                />
            </svg>
            <svg
                width={width}
                height={height}
                viewBox={`0 0 ${width} ${height}`}
                style={{
                    WebkitMask: `conic-gradient(rgba(0, 0, 0, 1.0) 0%, rgba(0, 0, 0,0.0) ${endPercentage}%)`,
                }}
            >
                <path
                    d={arc(
                        width / 2,
                        height / 2,
                        width / 2 - strokeWidth / 2,
                        0,
                        length
                    )}
                    fill={"none"}
                    stroke={color}
                    strokeWidth={strokeWidth}
                    strokeLinecap={"round"}
                />
            </svg>
            <div
                style={{
                    position: "absolute",
                    width: strokeWidth / 2,
                    height: strokeWidth,
                    background: "transparent",
                    top: `calc(50% - ${width / 2}px)`,
                    left: `calc(50% - ${strokeWidth / 2}px)`,
                    overflow: "hidden",
                }}
            >
                <div
                    style={{
                        width: strokeWidth,
                        height: strokeWidth,
                        background: color,
                        borderRadius: 100,
                    }}
                />
            </div>
        </div>
    )
}

Arconic.defaultProps = {
    length: 360,
    strokeWidth: 60,
    lineCap: true,
    color: "#0EF",
    colorEnd: "#60F",
    angle: 180,
}

addPropertyControls(Arconic, {
    strokeWidth: {
        type: ControlType.Number,
        title: "Stroke",
        min: 0,
        max: 200,
    },
    length: { type: ControlType.Number, title: "Length", min: 0, max: 360 },
    color: {
        type: ControlType.Color,
        title: "Front",
    },
    colorEnd: {
        type: ControlType.Color,
        title: "Back",
    },
})

const angleInRadians = angleInDegrees =>
    (angleInDegrees - 90) * (Math.PI / 180.0)

const polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {
    const a = angleInRadians(angleInDegrees)
    return {
        x: centerX + radius * Math.cos(a),
        y: centerY + radius * Math.sin(a),
    }
}

const arc = (x, y, radius, startAngle, endAngle) => {
    const fullCircle = endAngle - startAngle === 360
    const start = polarToCartesian(x, y, radius, endAngle - 0.01)
    const end = polarToCartesian(x, y, radius, startAngle)
    const arcFlag = endAngle - startAngle <= 180 ? "0" : "1"

    let d = [
        "M",
        start.x,
        start.y,
        "A",
        radius,
        radius,
        0,
        arcFlag,
        0,
        end.x,
        end.y,
    ].join(" ")

    if (fullCircle) d += "z"
    return d
}
